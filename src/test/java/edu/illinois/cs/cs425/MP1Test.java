package edu.illinois.cs.cs425;

import java.io.*;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

/*
 * Unit test for MP1.
 */

public class MP1Test extends TestCase {
    
    private static String testPath = "src/test/java/edu/illinois/cs/cs425/testFiles";
    private final static Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);

    /**
     * Create the test case
     *
     * @param testName name of the test case
     */
    public MP1Test(String testName) {
        super(testName);
    }

    /**
     * @return the suite of tests being tested
     */
    public static Test suite() {
        return new TestSuite(MP1Test.class);
    }

    /** 
     * Given a pattern, it will execute Qgrep and compare the results using Unix diff with the actual precomputed results of Unix grep
     * @param query Pattern to match
     * @param actualResultsFileName File which contains the expected results for the test are named according to this
     * @param inputFolder Folder to grep inside
     * @param numDaemons Number of nodes to spawn
    */
    private static void testHelper(String query, String actualResultsFileName, String inputFolder, int numDaemons) {
        try {
            String actualResultsFilepath = testPath + "/actualResults/" + actualResultsFileName;
            String[] argsD = {""};
            int tempPort = -1;
            Qgrep qgrep = new Qgrep();
            ArrayList<String> tempArgs = new ArrayList<String>(Arrays.asList(new String[] {"-p", query, "-d", testPath + "/inputs/" + inputFolder, "-h"}));
            ArrayList<Qdaemon> daemons = new ArrayList<Qdaemon>();
            
            for (int i = 0; i < numDaemons; i++) {
                tempPort = 6666 + (i*2);
                argsD[0] = Integer.toString(tempPort);
                logger.info(argsD[0]);
                Qdaemon qdaemon = new Qdaemon(argsD);
                tempArgs.add("0.0.0.0:"+argsD[0]);
                daemons.add(qdaemon);
            }
            
            String[] argsQ = new String[tempArgs.size()];
            argsQ = tempArgs.toArray(argsQ);
            
            String outputFolder = qgrep.execute(argsQ);

            logger.info("Qgrep executed");
            logger.info("Output folder generated by Qgrep is " + outputFolder);
            
            String diffCommand = "diff " + outputFolder + "/results.txt" + " " + actualResultsFilepath + " | wc -l";
            logger.info("diff command being executed is " + diffCommand);
            String[] diffCommands = {"/bin/sh", "-c", diffCommand};
            Runtime runtime = Runtime.getRuntime();
            Process process = runtime.exec(diffCommands);
            
            BufferedReader processInput = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String output = "";
            String temp = "";

            logger.info("Result of diff");
            
            while ((temp = processInput.readLine()) != null) {
                output += temp;
            }

            logger.info(output);
            logger.info("Finished result of diff");
            processInput = new BufferedReader(new InputStreamReader(process.getErrorStream()));

            logger.info("Error result of diff");
            String error = "";

            while ((temp = processInput.readLine()) != null) {
                logger.info(temp);
                error += temp;
                error += "\n";
            }

            logger.info("Finished error result of diff");

            assertTrue(output.replaceAll("\\s","").equals("0") && error.equals(""));
            logger.info("Test passed");

            for (Qdaemon qd : daemons) {
                qd.stopMe();
            }
        } catch (Exception e) {
            logger.severe(e.toString());
        }
    }

    /**
     * Testing on a simple pattern
     */
    public void testBasic() {
        this.testHelper("string.$", "testBasic.txt", "testBasic", 2);
    }

    /**
     * Testing on a larger input which does not contain this pattern
     */
    public void testLargeEmpty() {
        this.testHelper("m.$", "testLargeEmpty.txt", "testLarge", 3);
    }

    /**
     * Testing on a larger input which frequently contains this pattern
     */
    public void testLargeFrequent() {
        this.testHelper("proxy.aol.com", "testLargeFrequent.txt", "testLarge", 5);
    }
}
